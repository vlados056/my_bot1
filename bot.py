import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.dispatcher.router import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from mistralai import Mistral
from pymongo import MongoClient
from datetime import datetime
from html import escape

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# API-–∫–ª—é—á–∏
MISTRAL_API_KEY = "QwNYwVDIn1twPdLuyC4duwKOlq2jdIff"
TELEGRAM_BOT_TOKEN = "7548078558:AAEgLod6Nz8w1URR1aD86C9sw7TN_9LShGs"
ADMIN_USER_ID = 7068066786
AGENTS = {
    "copywriting": "ag:6401fee4:20241209:kopirater:b3ebccc1",
    "rewriting": "ag:6401fee4:20241210:reraiter:86206ba7",
    "randomize": "ag:6401fee4:20241210:randomizator:620fd1b8",
    "keywords": "ag:6401fee4:20241210:kliuchevye:483580ed",
    "headlines": "ag:6401fee4:20241211:zagolovki:7f76e383",
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mistral
client = Mistral(api_key=MISTRAL_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
IMAGE_URL_MENU = "https://imgur.com/EwRhwgH"
IMAGE_URL_COPYWRITTING = "https://imgur.com/q5ugZmu"
IMAGE_URL_REWRITTING = "https://imgur.com/l6BjPwN"
IMAGE_URL_RANDOMIZE = "https://imgur.com/kfK7Xw2"
IMAGE_URL_KEYWORDS = "https://imgur.com/sCFjVm2"
IMAGE_URL_HEADLINES = "https://imgur.com/wmWJQO5"
IMAGE_URL_ADDITIONAL = "https://imgur.com/Batathl"
IMAGE_URL_VERIFICATION = "https://imgur.com/TItnryq"
IMAGE_URL_PROMOTION = "https://imgur.com/AimcoqC"
IMAGE_URL_SUPPORT = "https://imgur.com/Ic58NtG"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mistral AI
async def get_mistral_response(user_message: str, agent_id: str) -> str:
    try:
        chat_response = client.agents.complete(
            agent_id=agent_id,
            messages=[{"role": "user", "content": user_message}],
        )
        return chat_response.choices[0].message.content
    except Exception as e:
        logging.error(f"Error interacting with Mistral AI: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB
def add_user_to_db(user_id, user_name, username):
    uri = "mongodb+srv://mvstarcorp:UFnERtzkd9fwvqzm@cluster0.ihw7m.mongodb.net/?retryWrites=true&w=majority&tlsAllowInvalidCertificates=True"
    client = MongoClient(uri)

    try:
        database = client.get_database("DB_AA_BOT")
        users = database.get_collection("users_asist_avito")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if users.count_documents({"user_id": user_id}) == 0:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            users.insert_one({
                "user_id": user_id,
                "user_name": user_name,
                "username": username,
                "registration_date": datetime.utcnow()
            })

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        client.close()

parse_mode = 'Markdown'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id == ADMIN_USER_ID

@router.message(F.text.startswith("/send_message"))
async def send_message_to_all_users(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —É–±–∏—Ä–∞—è –∫–æ–º–∞–Ω–¥—É
    text = message.text.replace("/send_message", "").strip()

    if not text:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
        return

    # **–≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ HTML**, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    text = escape(text)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB
    uri = "mongodb+srv://mvstarcorp:UFnERtzkd9fwvqzm@cluster0.ihw7m.mongodb.net/?retryWrites=true&w=majority&tlsAllowInvalidCertificates=True"
    client = MongoClient(uri)

    try:
        database = client.get_database("DB_AA_BOT")
        users = database.get_collection("users_asist_avito_1")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_ids = [user["user_id"] for user in users.find()]
        success_count = 0
        fail_count = 0

        for user_id in user_ids:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.bot.send_message(user_id, text, parse_mode="HTML")
                success_count += 1
                await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è
            except Exception as e:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                fail_count += 1

    except Exception as e:
        logging.error(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        client.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await message.answer(
        f"‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.</b>\n‚ùå –û—à–∏–±–æ–∫: {fail_count}",
        parse_mode="HTML"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id: int) -> bool:
    CHANNEL_ID = '@vlad_avitolog_vn'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '@mychannel' –∏–ª–∏ '-1001234567890'
    try:
        user_status = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return user_status.status in ['member', 'creator', 'administrator']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@router.message(F.text == "/start")
async def start_handler(message: types.Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_user_to_db(message.from_user.id, message.from_user.full_name, message.from_user.username)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/+Qocmsf91GSNjMzFi")],
        [InlineKeyboardButton(text="–Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)", callback_data="check_subscription")]
    ])

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@router.callback_query(F.data == "check_subscription")
async def check_subscription_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    await bot.answer_callback_query(callback.id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
    message = await bot.send_message(callback.message.chat.id, "–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É...")

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(5)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
    await bot.delete_message(callback.message.chat.id, message.message_id)

    if await check_subscription(user_id):
        await bot.send_message(callback.message.chat.id, "–í–∏–∂—É –ø–æ–¥–ø–∏—Å–∫—É. –î–µ—Ä–∂–∏—Ç–µ –¥–æ—Å—Ç—É–ø.")
        await open_main_menu(callback.message.chat.id)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/+Qocmsf91GSNjMzFi")],
            [InlineKeyboardButton(text="–Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)", callback_data="check_subscription")]
        ])
        await bot.send_message(callback.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
@router.callback_query(F.data == "already_subscribed")
async def already_subscribed_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    await bot.answer_callback_query(callback.id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
    message = await bot.send_message(callback.message.chat.id, "–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É...")

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(5)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
    await bot.delete_message(callback.message.chat.id, message.message_id)

    if await check_subscription(user_id):
        await bot.send_message(callback.message.chat.id, "–í–∏–∂—É —á—Ç–æ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å) –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª. –í–æ—Ç –¥–æ—Å—Ç—É–ø")
        await open_main_menu(callback.message.chat.id)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/+Qocmsf91GSNjMzFi")],
            [InlineKeyboardButton(text="–Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)", callback_data="check_subscription")]
        ])
        await bot.send_message(callback.message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def open_main_menu(chat_id: int):
    await bot.send_photo(
        chat_id=chat_id,
        photo=IMAGE_URL_MENU,
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=get_main_menu()
    )

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id == ADMIN_USER_ID

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", callback_data="additional_functions")],
        [InlineKeyboardButton(text="üìù –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥", callback_data="copywriting")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ—Ä–∞–π—Ç–∏–Ω–≥", callback_data="rewriting")],
        [InlineKeyboardButton(text="üîÑ –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞", callback_data="randomize")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="keywords")],
        [InlineKeyboardButton(text="üìã –ü–æ–¥–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤", callback_data="headlines")],
        [InlineKeyboardButton(text="‚ö°Ô∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="support")]
    ])

# –ù–æ–≤–æ–µ –º–µ–Ω—é "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"
def get_additional_functions_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –ò–ü/–û–û–û", callback_data="verification")],
        [InlineKeyboardButton(text="üî∞ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ 50% –¥–µ—à–µ–≤–ª–µ", callback_data="promotion")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"
@router.callback_query(F.data == "additional_functions")
async def additional_functions_handler(callback: CallbackQuery):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=IMAGE_URL_ADDITIONAL,
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.",
        reply_markup=get_additional_functions_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –ò–ü/–û–û–û"
@router.callback_query(F.data == "verification")
async def verification_handler(callback: CallbackQuery):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=IMAGE_URL_VERIFICATION,
        caption="–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —É–∂–µ –∏–º–µ—é—â–∏–π—Å—è —Å –ø–æ–º–æ—â—å—é —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ò–ü –∏–ª–∏ –û–û–û. \n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ '–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ'.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="verify_details")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="additional_functions"), InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ" –≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "verify_details")
async def verify_details_handler(callback: CallbackQuery):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=IMAGE_URL_VERIFICATION,
        caption="–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, @assit_avitoassis.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="additional_functions"), InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üî∞ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ 50% –¥–µ—à–µ–≤–ª–µ"
@router.callback_query(F.data == "promotion")
async def promotion_handler(callback: CallbackQuery):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=IMAGE_URL_PROMOTION,
        caption="–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–π –º–µ—Ç–æ–¥–∏–∫–∏ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –ê–≤–∏—Ç–æ –Ω–∞ 50% –¥–µ—à–µ–≤–ª–µ –∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ —ç—Ç–æ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–æ 40 - 50%! \n\n–≠—Ç–∞ –º–µ—Ç–æ–¥–∏–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ —Ç–æ–≤–∞—Ä–∫–µ. \n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ'.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="promotion_details")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="additional_functions"), InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ" –≤ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏
@router.callback_query(F.data == "promotion_details")
async def promotion_details_handler(callback: CallbackQuery):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=IMAGE_URL_PROMOTION,
        caption="–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, @assit_avitoassis.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="additional_functions"), InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–ª–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=IMAGE_URL_MENU,
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=get_main_menu()
    )

@router.callback_query(F.data == "additional_functions")
async def back_to_additional_functions(callback: CallbackQuery):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=IMAGE_URL_ADDITIONAL,
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.",
        reply_markup=get_additional_functions_menu()
    )

# Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@router.callback_query()
async def callback_handler(callback: CallbackQuery, state: FSMContext):
    action = callback.data

    if action in AGENTS:
        agent_id = AGENTS[action]
        await state.update_data(current_agent=agent_id)
        messages = {
            "copywriting": "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏—à—É, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ñ—Ñ–µ—Ä—ã –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. \n\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –í–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ –∏–ª–∏ —É—Å–ª—É–≥–µ, —á—Ç–æ–±—ã —è –º–æ–≥ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–ª—è –í–∞—Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.",
            "rewriting": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∏–Ω–≥–∞.",
            "randomize": "–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ (–º–∞—Å—Å–ø–æ—Å—Ç–∏–Ω–≥–∞).\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏.",
            "keywords": "–ù–∞–ø–∏—à–∏—Ç–µ 3 –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: \n–¥–æ—Å–∫–∞ –æ–±—Ä–µ–∑–Ω–∞—è, –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã –±—É—Ä—Å –¥–æ—Å–∫–∞, –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è...",
            "headlines": "–ù–∞–ø–∏—à–∏—Ç–µ 3 –ø—Ä–∏–º–µ—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: \n–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤, –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤, –ú–æ–Ω—Ç–∞–∂ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∂–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞ —Å–ø–ª–∏—Ç —Å–∏—Å—Ç–µ–º...",
        }
        image_urls = {
            "copywriting": IMAGE_URL_COPYWRITTING,
            "rewriting": IMAGE_URL_REWRITTING,
            "randomize": IMAGE_URL_RANDOMIZE,
            "keywords": IMAGE_URL_KEYWORDS,
            "headlines": IMAGE_URL_HEADLINES,
        }

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=image_urls[action],
            caption=messages[action],
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            )
        )
    elif action == "support":
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=IMAGE_URL_SUPPORT,
            caption="–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ @assit_avitoassis.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            )
        )
    elif action == "main_menu":
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=IMAGE_URL_MENU,
            caption="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
            reply_markup=get_main_menu()
        )
    elif action in {"like", "rewrite"}:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ü–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)

        if action == "like":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            await callback.message.answer(
                "–°–ø–∞—Å–∏–±–æ! –†–∞–¥, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –º–æ—è —Ä–∞–±–æ—Ç–∞!",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
                )
            )
        elif action == "rewrite":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
            processing_message = await callback.message.answer("–û–¥–Ω—É –º–∏–Ω—É—Ç—É... –ü–∏—à—É –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞.")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            user_data = await state.get_data()
            agent_id = user_data.get("current_agent")
            user_message = user_data.get("user_message")

            if agent_id and user_message:
                response = await get_mistral_response(user_message, agent_id)

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
                await bot.delete_message(chat_id=processing_message.chat.id, message_id=processing_message.message_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                max_length = 4096
                if len(response) > max_length:
                    for i in range(0, len(response), max_length):
                        await callback.message.answer(response[i:i + max_length])
                else:
                    await callback.message.answer(response)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏
                await callback.message.answer(
                    "–û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="–ù—Ä–∞–≤–∏—Ç—Å—è", callback_data="like")],
                            [InlineKeyboardButton(text="–ù—É–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å", callback_data="rewrite")],
                            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                        ]
                    )
                )
            else:
                await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def text_message_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    agent_id = user_data.get("current_agent")

    if not agent_id:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç.")
        return

    user_message = message.text
    await state.update_data(user_message=user_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å..." –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    processing_message = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Mistral
    response = await get_mistral_response(user_message, agent_id)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å..."
    await bot.delete_message(chat_id=processing_message.chat.id, message_id=processing_message.message_id)

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    max_length = 4096
    if len(response) > max_length:
        for i in range(0, len(response), max_length):
            await message.answer(response[i:i + max_length])
    else:
        await message.answer(response)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await message.answer(
        "–û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ù—Ä–∞–≤–∏—Ç—Å—è", callback_data="like")],
                [InlineKeyboardButton(text="–ù—É–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å", callback_data="rewrite")],
                [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        )
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
